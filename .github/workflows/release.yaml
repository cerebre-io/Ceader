name: CI + PyPI Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

  lint:
    #----------------------------------------------
    #               run linter
    #----------------------------------------------
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run linter
        run: |
            poetry run python -m black --check ceader tests
            poetry run python -m autoflake \
                --check --recursive --remove-all-unused-imports --expand-star-imports \
                ceader tests
            poetry run python -m isort --check-only ceader tests
            poetry run python -m mypy ceader tests
            poetry run python -m bandit --configfile .bandit.yaml --recursive ceader tests

  tests:
    #----------------------------------------------
    #              run test suite
    #----------------------------------------------
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/

  release:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build the dist files
        run: python setup.py sdist bdist_wheel
      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*
