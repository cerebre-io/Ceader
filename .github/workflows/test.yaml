
#https://blog.deepjyoti30.dev/tests-github-python
# name: Run tests

# on:
#   push:
#     branches:
#       - "main"
#   pull_request:
#     branches:
#       - "main"


# jobs:

#   # lint:
#   #   runs-on: ubuntu-latest
#   #   strategy:
#   #     matrix:
#   #       python-version: [3.9]
#   #     steps:

#   test:
#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         python-version: [3.9]

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v2
#       - name: Set Up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Display Python version
#         run: python -c "import sys; print(sys.version)"
#       - name: Install package
#         run: python setup.py install
#       - name: Install pytest
#         run: |
#           python -m pip install --upgrade pip
#           pip install pytest
#       - name: Run tests
#         run: pytest tests/*

#https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#starting-with-the-python-workflow-template
# name: Python package

# on: [push]

# jobs:
#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.9"]

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v3
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install pytest
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#       - name: Test with pytest
#         run: pytest tests/*

#http://donofden.com/blog/2020/05/15/CI-CD-with-GitHub-Actions-with-poetry

# name: Pull-Request-Checks
# on: [push]
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out the code
#         uses: actions/checkout@v1
#         with:
#           fetch-depth: 1

#       - name: Set up Python 3.9
#         uses: actions/setup-python@v1
#         with:
#           python-version: 3.9

#       - name: Install Poetry
#         uses: dschep/install-poetry-action@v1.2

#       - name: Cache Poetry virtualenv
#         uses: actions/cache@v1
#         id: cache
#         with:
#           path: ~/.virtualenvs
#           key: poetry-$
#           restore-keys: |
#             poetry-$



#       - name: Install Dependencies using Poetry
#         run: poetry install

#       - name: Run pytest
#         run: PYTHONPATH=src/ poetry run python -m pytest -v --cov=src/ tests/

#       - name: Run Coverage
#         run: PYTHONPATH=src/ poetry run python -m coverage report -m;

#       - name: Generate XML Report
#         run: PYTHONPATH=src/ poetry run python -m coverage xml


name: test

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
